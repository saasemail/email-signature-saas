'use client'
import { useState, useRef, useEffect } from 'react'
import html2canvas from 'html2canvas'
import jsPDF from 'jspdf'
import { QRCodeCanvas } from 'qrcode.react'

export default function Home() {
  const previewRef = useRef(null)
  const [charCounts, setCharCounts] = useState({ fullName: 0, jobTitle: 0 })

  const [form, setForm] = useState({
    fullName: '',
    jobTitle: '',
    company: '',
    phone: '',
    website: '',
    color: '#000000',
    bgColor: '#ffffff',
    image: null,
    imageBase64: '',
    template: 'classic'
  })

  useEffect(() => {
    setCharCounts({
      fullName: form.fullName.length,
      jobTitle: form.jobTitle.length
    })
  }, [form.fullName, form.jobTitle])

  const handleChange = (e) => {
    const { name, value } = e.target
    setForm((prev) => ({ ...prev, [name]: value }))
  }

  const handleImageUpload = (e) => {
    const file = e.target.files[0]
    if (!file) return
    const reader = new FileReader()
    reader.onloadend = () => setForm((prev) => ({ ...prev, image: file, imageBase64: reader.result }))
    reader.readAsDataURL(file)
  }

  const getTemplateHTML = () => {
    const { fullName, jobTitle, company, phone, website, color, bgColor, imageBase64, template } = form
    const footer = `<div style="font-size:10px; margin-top:10px; opacity:0.6;">Generated by <a href="https://email-signature-saas.vercel.app" target="_blank" rel="noopener noreferrer" style="color:${color}; text-decoration:underline;">EmailSignatureSaaS</a></div>`

    if (template === 'modern') {
      return `<div style="font-family:sans-serif; background:${bgColor}; color:${color}; padding:16px; border-left:4px solid ${color};">
          <div style="display:flex; align-items:center; gap:12px;">
            ${imageBase64 ? `<img src="${imageBase64}" width="60" style="border-radius:8px;" />` : ''}
            <div>
              ${fullName ? `<div style="font-size:18px; font-weight:bold;">${fullName}</div>` : ''}
              ${jobTitle || company ? `<div>${jobTitle}${jobTitle && company ? ' @ ' : ''}${company}</div>` : ''}
              ${phone ? `<div>📞 ${phone}</div>` : ''}
              ${website ? `<div>🌐 <a href="${website}" target="_blank" rel="noopener noreferrer" style="color:${color};">${website}</a></div>` : ''}
            </div>
          </div>
          ${footer}
        </div>`
    }

    if (template === 'bold') {
      return `<div style="font-family:Arial Black; background:${bgColor}; color:${color}; padding:20px; text-transform:uppercase;">
          ${imageBase64 ? `<img src="${imageBase64}" width="100" style="margin-bottom:10px;" />` : ''}
          ${fullName ? `<div style="font-size:20px;">${fullName}</div>` : ''}
          ${jobTitle || company ? `<div style="margin:4px 0;">${jobTitle}${jobTitle && company ? ' - ' : ''}${company}</div>` : ''}
          ${(phone || website) ? `<div>${phone ? phone : ''}${phone && website ? ' • ' : ''}${website ? `<a href="${website}" target="_blank" rel="noopener noreferrer" style="color:${color};">${website}</a>` : ''}</div>` : ''}
          ${footer}
        </div>`
    }

    return `<table style="font-family:Arial; font-size:14px; background:${bgColor}; color:${color}; padding:10px;">
        <tr>
          ${imageBase64 ? `<td style="padding-right:10px;"><img src="${imageBase64}" width="80" style="border-radius:6px;" /></td>` : ''}
          <td>
            ${fullName ? `<strong>${fullName}</strong><br/>` : ''}
            ${jobTitle || company ? `${jobTitle}${jobTitle && company ? ' at ' : ''}${company}<br/>` : ''}
            ${phone ? `📞 ${phone}<br/>` : ''}
            ${website ? `🌐 <a href="${website}" target="_blank" rel="noopener noreferrer" style="color:${color};">${website}</a><br/>` : ''}
            ${footer}
          </td>
        </tr>
      </table>`
  }

  const copyToClipboard = () => {
    navigator.clipboard.writeText(getTemplateHTML())
    alert('Signature HTML copied!')
  }

  const downloadHTML = () => {
    const blob = new Blob([getTemplateHTML()], { type: 'text/html' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = 'signature.html'
    a.click()
    URL.revokeObjectURL(url)
  }

  const downloadPNG = () => {
    if (!previewRef.current) return
    html2canvas(previewRef.current).then((canvas) => {
      const link = document.createElement('a')
      link.href = canvas.toDataURL()
      link.download = 'signature.png'
      link.click()
    })
  }

  const downloadPDF = () => {
    if (!previewRef.current) return
    html2canvas(previewRef.current).then((canvas) => {
      const imgData = canvas.toDataURL('image/png')
      const pdf = new jsPDF()
      const imgProps = pdf.getImageProperties(imgData)
      const pdfWidth = pdf.internal.pageSize.getWidth()
      const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width
      pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight)
      pdf.save('signature.pdf')
    })
  }

  const resetForm = () => {
    setForm({
      fullName: '', jobTitle: '', company: '', phone: '', website: '', color: '#000000', bgColor: '#ffffff', image: null, imageBase64: '', template: 'classic'
    })
  }

  const copyPlainText = () => {
    const text = `${form.fullName}\n${form.jobTitle} at ${form.company}\n${form.phone}\n${form.website}`
    navigator.clipboard.writeText(text)
    alert('Plain text copied!')
  }

  return (
    <main className="min-h-screen bg-white text-black px-4 py-6 sm:px-6 lg:px-12">
      <h1 className="text-2xl sm:text-3xl font-bold mb-6 text-center">Email Signature Generator</h1>

      <div className="flex flex-col lg:flex-row gap-6">
        <div className="flex-1 space-y-4">
          <input name="fullName" placeholder="Full Name" value={form.fullName} onChange={handleChange} className="w-full p-2 border rounded" />
          <p className="text-xs text-gray-500">{charCounts.fullName}/50</p>
          <input name="jobTitle" placeholder="Job Title" value={form.jobTitle} onChange={handleChange} className="w-full p-2 border rounded" />
          <p className="text-xs text-gray-500">{charCounts.jobTitle}/50</p>
          <input name="company" placeholder="Company" value={form.company} onChange={handleChange} className="w-full p-2 border rounded" />
          <input name="phone" placeholder="Phone Number" value={form.phone} onChange={handleChange} className="w-full p-2 border rounded" />
          <input name="website" placeholder="Website (https://...)" value={form.website} onChange={handleChange} className="w-full p-2 border rounded" />

          <div className="flex gap-4">
            <div>
              <label className="block text-sm">Text Color</label>
              <input type="color" name="color" value={form.color} onChange={handleChange} />
            </div>
            <div>
              <label className="block text-sm">Background</label>
              <input type="color" name="bgColor" value={form.bgColor} onChange={handleChange} />
            </div>
          </div>

          <div>
            <label className="block text-sm mb-1">Upload Avatar / Logo</label>
            <label className="inline-block px-4 py-2 bg-black text-white rounded cursor-pointer hover:bg-gray-800 transition">
              Choose File
              <input type="file" accept="image/*" onChange={handleImageUpload} className="hidden" />
            </label>
            {form.imageBase64 && (
              <img src={form.imageBase64} alt="preview" className="mt-2 h-20 rounded border" />
            )}
          </div>

          <div>
            <label className="block text-sm mb-1 mt-2">Choose Template</label>
            <select name="template" value={form.template} onChange={handleChange} className="w-full p-2 border rounded">
              <option value="classic">Classic</option>
              <option value="modern">Modern</option>
              <option value="bold">Bold</option>
            </select>
          </div>

          <button onClick={resetForm} className="mt-2 px-3 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition">Clear All</button>
        </div>

        <div className="flex-1 bg-white border rounded p-4 overflow-auto">
          <div ref={previewRef} dangerouslySetInnerHTML={{ __html: getTemplateHTML() }} />
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2 mt-4">
            <button onClick={copyToClipboard} className="px-3 py-2 bg-black text-white rounded hover:bg-gray-800 transition">Copy HTML</button>
            <button onClick={copyPlainText} className="px-3 py-2 bg-gray-700 text-white rounded hover:bg-gray-800 transition">Copy Plain</button>
            <button onClick={downloadHTML} className="px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition">Download HTML</button>
            <button onClick={downloadPNG} className="px-3 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition">Download PNG</button>
            <button onClick={downloadPDF} className="px-3 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition">Download PDF</button>
          </div>
          <div className="mt-6 text-center">
            <p className="text-sm mb-2 text-gray-500">QR Code (vCard contact info)</p>
            <QRCode
              value={`BEGIN:VCARD\nFN:${form.fullName}\nORG:${form.company}\nTEL:${form.phone}\nURL:${form.website}\nEND:VCARD`}
              size={128}
            />
          </div>
        </div>
      </div>
    </main>
  )
}
